// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RevDevNetworkSDK
import Foundation
@_exported import RevDevNetworkSDK
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class NetworkService : RevDevNetworkSDK.NetworkServiceProtocol {
  public init(networkDelegate: any Foundation.URLSessionDelegate = NetworkDelegate(), cache: (any RevDevNetworkSDK.CacheProtocol)? = URLCacheWrapper(), decoder: Foundation.JSONDecoder = JSONDecoder(), headers: [Swift.String : Swift.String]? = nil, timeoutInterval: Foundation.TimeInterval = 30, retryPolicy: RevDevNetworkSDK.RetryPolicy? = nil)
  final public func fetchData<T>(url: Foundation.URL, headers: [Swift.String : Swift.String]? = nil, completion: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  #if compiler(>=5.3) && $AsyncAwait
  final public func fetchData<T>(url: Foundation.URL, headers: [Swift.String : Swift.String]? = nil) async throws -> T where T : Swift.Decodable
  #endif
  @objc deinit
}
public enum RetryPolicy {
  case none
  case fixed(maxRetries: Swift.Int, interval: Foundation.TimeInterval)
  case exponentialBackoff(maxRetries: Swift.Int, initialDelay: Foundation.TimeInterval, multiplier: Swift.Double, maxDelay: Foundation.TimeInterval)
}
@objc @_inheritsConvenienceInitializers open class NetworkDelegate : ObjectiveC.NSObject, Foundation.URLSessionDelegate {
  @objc open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public protocol NetworkServiceProtocol {
  func fetchData<T>(url: Foundation.URL, headers: [Swift.String : Swift.String]?, completion: @escaping (Swift.Result<T, any Swift.Error>) -> Swift.Void) where T : Swift.Decodable
  #if compiler(>=5.3) && $AsyncAwait
  func fetchData<T>(url: Foundation.URL, headers: [Swift.String : Swift.String]?) async throws -> T where T : Swift.Decodable
  #endif
}
public protocol CacheProtocol {
  func cachedResponse(for request: Foundation.URLRequest) -> Foundation.CachedURLResponse?
  func storeCachedResponse(_ cachedResponse: Foundation.CachedURLResponse, for request: Foundation.URLRequest)
  func setMemoryCapacity(_ capacity: Swift.Int)
  func flushCache()
}
final public class URLCacheWrapper : RevDevNetworkSDK.CacheProtocol {
  public init(cache: Foundation.URLCache = .shared)
  final public func cachedResponse(for request: Foundation.URLRequest) -> Foundation.CachedURLResponse?
  final public func storeCachedResponse(_ cachedResponse: Foundation.CachedURLResponse, for request: Foundation.URLRequest)
  final public func setMemoryCapacity(_ capacity: Swift.Int)
  final public func flushCache()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class NoCache : RevDevNetworkSDK.CacheProtocol {
  final public func cachedResponse(for request: Foundation.URLRequest) -> Foundation.CachedURLResponse?
  final public func storeCachedResponse(_ cachedResponse: Foundation.CachedURLResponse, for request: Foundation.URLRequest)
  final public func setMemoryCapacity(_ capacity: Swift.Int)
  final public func flushCache()
  @objc deinit
}
